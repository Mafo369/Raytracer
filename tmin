unit-test.cpp:23:99:// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
unit-test.cpp:27:23:    tmin = (bounds[theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
unit-test.cpp:27:44:    tmin = (bounds[theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
unit-test.cpp:27:62:    tmin = (bounds[theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
unit-test.cpp:28:25:    tmax = (bounds[1-theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
unit-test.cpp:28:46:    tmax = (bounds[1-theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
unit-test.cpp:28:64:    tmax = (bounds[1-theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
unit-test.cpp:29:24:    tymin = (bounds[theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
unit-test.cpp:29:45:    tymin = (bounds[theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
unit-test.cpp:29:63:    tymin = (bounds[theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
unit-test.cpp:30:26:    tymax = (bounds[1-theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
unit-test.cpp:30:47:    tymax = (bounds[1-theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
unit-test.cpp:30:65:    tymax = (bounds[1-theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
unit-test.cpp:34:24:    tzmin = (bounds[theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
unit-test.cpp:34:45:    tzmin = (bounds[theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
unit-test.cpp:34:63:    tzmin = (bounds[theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
unit-test.cpp:35:26:    tzmax = (bounds[1-theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
unit-test.cpp:35:47:    tzmax = (bounds[1-theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
unit-test.cpp:35:65:    tzmax = (bounds[1-theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
unit-test.cpp:39:19:    if (tmin > theRay->tmin) theRay->tmin = tmin;
unit-test.cpp:39:33:    if (tmin > theRay->tmin) theRay->tmin = tmin;
unit-test.cpp:40:19:    if (tmax < theRay->tmax) theRay->tmax = tmax;
unit-test.cpp:40:33:    if (tmax < theRay->tmax) theRay->tmax = tmax;
raytracer.h:22:54:// Possible intersection are considered only between ray->tmin and ray->tmax
raytracer.h:22:68:// Possible intersection are considered only between ray->tmin and ray->tmax
raytracer.h:23:4:// ray->tmax is updated during this process
raytracer.cpp:23:18:  float dn = dot(ray->dir, n);
raytracer.cpp:29:21:    float t = -(dot(ray->orig, n)+ obj->geom.plane.dist)/dn;
raytracer.cpp:30:13:    if(t >= ray->tmin && t <= ray->tmax){
raytracer.cpp:30:31:    if(t >= ray->tmin && t <= ray->tmax){
raytracer.cpp:31:32:      intersection->position = ray->orig + (t * ray->dir);
raytracer.cpp:31:49:      intersection->position = ray->orig + (t * ray->dir);
raytracer.cpp:45:13:  vec3 oc = ray->orig - obj->geom.sphere.center;
raytracer.cpp:46:20:  float b = 2*(dot(ray->dir, oc));
raytracer.cpp:54:13:    if(t >= ray->tmin && t <= ray->tmax){
raytracer.cpp:54:31:    if(t >= ray->tmin && t <= ray->tmax){
raytracer.cpp:55:32:      intersection->position = ray->orig + (t * ray->dir);
raytracer.cpp:55:49:      intersection->position = ray->orig + (t * ray->dir);
raytracer.cpp:65:14:    if(t1 >= ray->tmin && t1 <= ray->tmax && t2 >= ray->tmin && t2 <= ray->tmax){
raytracer.cpp:65:33:    if(t1 >= ray->tmin && t1 <= ray->tmax && t2 >= ray->tmin && t2 <= ray->tmax){
raytracer.cpp:65:52:    if(t1 >= ray->tmin && t1 <= ray->tmax && t2 >= ray->tmin && t2 <= ray->tmax){
raytracer.cpp:65:71:    if(t1 >= ray->tmin && t1 <= ray->tmax && t2 >= ray->tmin && t2 <= ray->tmax){
raytracer.cpp:67:20:    }else if(t1 >= ray->tmin && t1 <= ray->tmax){
raytracer.cpp:67:39:    }else if(t1 >= ray->tmin && t1 <= ray->tmax){
raytracer.cpp:69:20:    }else if(t2 >= ray->tmin && t2 <= ray->tmax){
raytracer.cpp:69:39:    }else if(t2 >= ray->tmin && t2 <= ray->tmax){
raytracer.cpp:74:30:    intersection->position = ray->orig + (t * ray->dir);
raytracer.cpp:74:47:    intersection->position = ray->orig + (t * ray->dir);
raytracer.cpp:96:36:        float temp_dist = distance(ray->orig, temp->position);
raytracer.cpp:112:36:        float temp_dist = distance(ray->orig, temp->position);
raytracer.cpp:256:16:      vec3 n = ray->dir * -1.0f;
raytracer.cpp:263:27:      //ray_ombre->tmax = ray->tmax;
raytracer.cpp:264:27:      //ray_ombre->tmin = ray->tmin;
kdtree.cpp:86:99:// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
kdtree.cpp:90:23:    tmin = (bounds[theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
kdtree.cpp:90:44:    tmin = (bounds[theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
kdtree.cpp:90:62:    tmin = (bounds[theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
kdtree.cpp:91:25:    tmax = (bounds[1-theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
kdtree.cpp:91:46:    tmax = (bounds[1-theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
kdtree.cpp:91:64:    tmax = (bounds[1-theRay->sign[0]].x - theRay->orig.x) * theRay->invdir.x;
kdtree.cpp:92:24:    tymin = (bounds[theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
kdtree.cpp:92:45:    tymin = (bounds[theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
kdtree.cpp:92:63:    tymin = (bounds[theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
kdtree.cpp:93:26:    tymax = (bounds[1-theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
kdtree.cpp:93:47:    tymax = (bounds[1-theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
kdtree.cpp:93:65:    tymax = (bounds[1-theRay->sign[1]].y - theRay->orig.y) * theRay->invdir.y;
kdtree.cpp:97:24:    tzmin = (bounds[theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
kdtree.cpp:97:45:    tzmin = (bounds[theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
kdtree.cpp:97:63:    tzmin = (bounds[theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
kdtree.cpp:98:26:    tzmax = (bounds[1-theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
kdtree.cpp:98:47:    tzmax = (bounds[1-theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
kdtree.cpp:98:65:    tzmax = (bounds[1-theRay->sign[2]].z - theRay->orig.z) * theRay->invdir.z;
kdtree.cpp:102:19:    if (tmin > theRay->tmin) theRay->tmin = tmin;
kdtree.cpp:102:33:    if (tmin > theRay->tmin) theRay->tmin = tmin;
kdtree.cpp:103:19:    if (tmax < theRay->tmax) theRay->tmax = tmax;
kdtree.cpp:103:33:    if (tmax < theRay->tmax) theRay->tmax = tmax;
build/CMakeFiles/Makefile.cmake:53:44:  "/usr/share/cmake-3.10/Modules/Compiler/Cray-DetermineCompiler.cmake"
